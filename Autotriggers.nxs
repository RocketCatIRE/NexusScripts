{"name":".tldr","enabled":true,"description":"Too long, didn't really care","type":"group","id":1,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":""},{"type":"function","name":"tldr_ignorables","enabled":true,"id":4,"code":"var initiate = false\nif (typeof tldr == 'undefined') { initiate = true }\n\ntldr = typeof tldr !== 'undefined' ? tldr : {}\n\nif (initiate) { tldr.active = true }\n\ntldr.ignorables = [\n   'A',\n   'An',\n   'In',\n   'It',\n   'The',\n   'There',\n   'This',\n   'To',\n   'You',\n   'Your',\n   \n   'Achaea',\n   'Additional',\n   'Age',\n   'Aldar',\n   'Announce',\n   'Autocuring',\n   'Avatar',\n   'Ashtani',\n   'Atop',\n   'Available',\n   'Avenue',\n   'Balance',\n   'Beginning',\n   'Being',\n   'Black',\n   'Bloodline',\n   'City',\n   'Character',\n   'Class',\n   'Comments',\n   'Con',\n   'Constitution',\n   'Containers',\n   'Creator',\n   'Credits',\n   'Cult',\n   'Curing',\n   'Current',\n   'Defences',\n   'Dex',\n   'Dexterity',\n   'Elections',\n   'Elemental',\n   'Empire',\n   'Endurance',\n   'Events',\n   'Ever',\n   'Falcons',\n   'Fas',\n   'File',\n   'Finding',\n   'From',\n   'FULL',\n   'Gender',\n   'Greater',\n   'Guardian',\n   'Guild',\n   'Guise',\n   'Hand',\n   'Have',\n   'He',\n   'Her',\n   'Herself',\n   'Health',\n   'Him',\n   'Himself',\n   'His',\n   'How',\n   'Info',\n   'Information',\n   'Int',\n   'Intelligence',\n   'Left',\n   'Level',\n   'Lessons',\n   'Loud',\n   'Mana',\n   'Mayan',\n   'Meets',\n   'Member',\n   'Menace',\n   'Misc',\n   'My',\n   'Name',\n   'News',\n   'No',\n   'Nothing',\n   'On',\n   'Or',\n   'Penned',\n   'Please',\n   'Plus',\n   'Poetry',\n   'Position',\n   'Primary',\n   'Public',\n   'Race',\n   'Rank',\n   'Reserves',\n   \"Revelation's\",\n   'Riftables',\n   'Right',\n   'Scimitar',\n   'SCORE',\n   'Sect',\n   'Seleucarian',\n   'Slot',\n   'Statpack',\n   'Str',\n   'Strength',\n   'Stretching',\n   'Subject',\n   \"Suremekh'neina\",\n   'Taken',\n   'Time',\n   'Today',\n   'Token',\n   'Tokens',\n   'Total',\n   'Type',\n   'Use',\n   'Vita',\n   'We',\n   'Weapon',\n   'Weapons',\n   'Well',\n   'What',\n   'When',\n   'Why',\n   'Wielded',\n   'Willpower',\n   'With',\n   \n   'Ashtan',\n   'Cyrene',\n   'Eleusis',\n   'Hashan',\n   'Mhaldor',\n   'Targossas',\n   \n   'Alchemist',\n   'Apostate',\n   'Bard',\n   'Blademaster',\n   'Depthswalker',\n   'Druid',\n   'Infernal',\n   'Jester',\n   'Magi',\n   'Monk',\n   'Occultist',\n   'Paladin',\n   'Priest',\n   'Runewarden',\n   'Sentinel',\n   'Serpent',\n   'Shaman',\n   'Sylvan',\n    \n   'Dragon',\n   'Black',\n   'Blue',\n   'Gold',\n   'Green',\n   'Red',\n   'Silver',\n   'Yellow',\n    \n   'Shikudo',\n    \n   'Grook',\n    \n   // Known Ranks\n   'Bondsman',\n   'Nemesian',\n   'Neophyte',\n   'Plebeian',\n   'Purblind',\n   'Unsighted',\n]"},{"type":"function","name":"tldr_initialise","enabled":true,"id":3,"code":"tldr = (function(tldr) {\n var autoGenerate = true\n var autoSave     = false\n    \n var className    = 'tldr'\n var threshold    = 305\n var buffer       = []\n var bufferLength = 55\n var destination  = 'tldr.autotriggers.txt'\n var inject    = function(rule) { $('body').append('<div class=\"' + className + '\">&shy;<style>' + rule + '</style></div>') }\n var ignorables   = tldr.ignorables\n var parsed       = 0\n var generated    = 0\n \n var prefix = '<span style=\"color: rgba(144,144,14,1);\">'\n var report = function(msg) {\n  msg = '<span style=\"color: DarkCyan;\">(<span style=\"color: DeepSkyBlue;\">tldr</span>)</span>: ' + msg\n  ow_Write('#output_main',msg)   \n }\n \n var hide = function() {\n   if ($('.' + className).length) { $('.' + className).remove() }\n }\n var show = function() {\n   hide()\n   inject('.matched    { color: rgba(  32,  89,  66, 1); }')\n   inject('.prematched { color: rgba(  32,  40, 125, 1); }')\n   inject('.excluded   { color: rgba(  87,  20, 120, 1); }')\n   inject('.unmatched  { color: rgba( 132,  89,  66, 1); }')\n   inject('.pmatched   { color: rgba(  31,  31,  31, 1); }')\n }\n var activate = function() {\n  tldr.active = true\n  // show()\n  report('.tldr <span style=\"color: green\";>activated</span>.') }\n var deactivate = function() {\n  tldr.active = false\n  // hide()\n  report('.tldr <span style=\"color: red\";>deactivated</span>.') }\n \n var begin = (function() {\n   show()\n\n   // overwrite ws.onmessage, replace handle_read to swap 'read_data' for 'client.read_data'\n   if (ws) {\n    ws.onmessage = function(msgevent) {\n      var arr = msgevent.data\n      arr = new Uint8Array(arr)\n      var s = ''\n      for (var i=0; i<arr.length; ++i) {\n       s += String.fromCharCode(arr[i]) }\n      client.read_data(s)\n    }\n   }\n   // overwrite ws.onmessage's version of client.read_data\n   if (client) {\n    client.read_data = function(s) {\n      var str\n      do {\n       str = client.handle_telnet_read(s)\n       s   = ''\n       if (str === false) { break }\n       if (gagged) { continue }\n       var lines = client.telnet_split(str)\n       lines = client.parse_lines(lines)\n       if (lines === false) { continue }\n       client.current_block = lines\n       if (client.triggers_enabled) { lines = client.handle_triggers(lines) }\n       for (var idx=0; idx<lines.length; ++idx) {\n         var temp = ''\n         if (lines[idx].line) { temp = lines[idx].line }\n         else if (lines[idx].prompt) { temp = lines[idx].prompt }\n         if (temp.length) { client.handle_on_msg_recv(temp) }\n       }\n       run_function('onBlock', null, 'ALL')\n       \n       client.display_text_block(lines)\n          \n       client.current_line = undefined\n       client.current_block = undefined\n      } while (str !== false)\n    }\n    // next, overwrite client.read_data's version of client.handle_triggers\n    client.handle_triggers = function(block) {\n      if (fullstop) { return block }\n      for (var idx=0; idx<block.length; idx++) {\n       if (idx >= 1000) { break }\n       var text = null\n       if (block[idx].no_triggers) { continue }\n       if (block[idx].line) { text = block[idx].parsed_line }\n       else if (block[idx].prompt) { text = block[idx].parsed_prompt }\n       if (text == null) { continue }\n       var txt = text.text()\n\n       client.current_line = block[idx]\n       var list = client.reflex_get_active_list('trigger')\n       var matched = false\n       for (var id=0; id<list.length; id++) {\n         var match = client.do_matching(txt, list[id].text, list[id].matching, list[id].whole_words, list[id].case_sensitive)\n         if (match == null) { continue }\n         if (client.echo_triggers) { print('Trigger: ' + list[id].name, client.color_trigecho) }\n         var actions = client.prepare_actions('trigger', list[id], match, block, idx, text)\n         client.execute_actions(actions, 0)\n         if (match !== null && tldr.ignore == false && matched == false) { matched = true }\n         // !important: reset tldr.matchIgnore\n         tldr.ignore = false\n       }\n       client.match_waiting_actions(text, block, idx)\n       \n       if (block[idx].parsed_line) {\n        block[idx].parsed_line.matched = matched\n        if (tldr.active) {\n        if (matched == false) { // this block inside the parsed_line block to avoid parsing prompts for pattern recognition\n          var a = tldr.receive(txt)\n          if (a == false) { block[idx].parsed_line.prematched = true }\n          if (a == 'excluded') { block[idx].parsed_line.excluded = true }\n        }}\n       }\n      }\n      return block\n    }\n    // rewrite client.display_text_block to access client.generate_text_block\n    client.display_text_block = function(lines) {\n      var block = client.generate_text_block(lines)\n      client.update_text_completion(lines)\n      if (block.length) { ow_Write('#output_main', block) }\n    }\n    // finally, overwrite client.generate_text_block to insert pre-line data\n    client.generate_text_block = function(lines) {\n      var count = 0\n      var timestamp\n      if (client.show_timestamp_milliseconds === true) { timestamp = client.getTimeMS() } else { timestamp = client.getTimeNoMS() }\n      var cl = 'timestamp mono no_out'\n      timestamp = \"<span class=\\\"\" + cl + \"\\\">\" + timestamp + \"&nbsp;</span>\"\n      var res = ''\n      var counter = 0\n      for (var i=0; i<lines.length; i++) {\n       var txt  = lines[i].parsed_line\n       var font = lines[i].monospace ? 'mono' : ''\n       var matched = lines[i].parsed_line || false\n       var ftxt = txt ? txt.formatted() : ''\n       if (tldr.active && lines[i].parsed_line) { // !important\n         if (lines[i].parsed_line.matched) {\n          ftxt = '<span class=\"matched\">&compfn;</span> ' + ftxt }\n         else if (lines[i].parsed_line.prematched) {\n          ftxt = '<span class=\"prematched\">&compfn;</span> ' + ftxt }\n         else if (lines[i].parsed_line.excluded) {\n          ftxt = '<span class=\"excluded\">&compfn;</span> ' + ftxt }\n         else {\n          ftxt = '<span class=\"unmatched\">&compfn;</span> ' + ftxt }\n       }\n       var line = \"<p class=\\\"\" + font + \"\\\">\" + timestamp + ftxt + \"</p>\"\n       if (client.logging && txt) { client.append_to_log(line) }\n       if (lines[i].gag) { continue }\n       counter++\n       if (txt) {\n         count++\n         res += line }\n       var pr = lines[i].parsed_prompt\n       if (pr && (count > 0)) {\n         var fpr = pr.formatted()\n         if (tldr.active) { fpr = '<span class=\"pmatched\">&compfn;</span> ' + fpr } // !important\n         res += '<p class=\"prompt ' + font + '\">' + timestamp + fpr + '</p>' }\n       if ((!pr) && (!txt) && (counter > 1) && (i <lines.length - 1)) {\n         res += '<p>' + timestamp + '&nbsp;' + '</p>' }\n      }\n      if (client.extra_break && res.length) { res += '<br />' }\n      return res\n    }\n  } // end client\n })()\n \n var checkBuffer = function(line) {\n  var goAhead = true\n  for (var i=0; i<tldr.buffer.length; i++) {\n    if (tldr.buffer[i].regex) {\n     var RE = tldr.buffer[i].regex\n     if (RE.exec(line)) { // already matching!\n      goAhead = false\n      break\n     } else { }\n    }\n  }\n  if (goAhead) { return line } else { return false }\n  // return line\n }\n    \n var receive = function(line) {\n  // !statistics   \n  tldr.parsed += 1\n     \n  tldr.buffer = buffer\n  buffer = tldr.buffer\n  if (buffer.length > bufferLength) {\n   // save here if not automated\n   buffer = []\n   tldr.buffer = buffer\n  }\n  if (line.length > threshold) { // do nothing, too long!\n   return 'excluded'\n  } else if (line.match(/^[^\\w]{2}.*$/)) { // do nothing!\n   return 'excluded'\n  } else if (checkBuffer(line)) {\n   var t = process(line)\n   if (t.excluded) { return 'excluded' } else {\n     tldr.buffer.push(t)\n     if (tldr.autoGenerate) { tldr.generate(t) }\n     return true } // tricky!\n  }\n  // differentiate pre-matched\n  if (checkBuffer(line) == false) {\n   return false   \n  } else {\n   return true   \n  }\n }\n \n var snub = function(line, pattern, p) {\n  line = line.replace( pattern,\n    function(str) {\n     if (ignorables.indexOf(str) <= -1) {\n       return p\n     } else { return str }\n    })\n  return line\n }\n \n // Performance Optimisation\n var replacements = []\n     replacements.push({ re: /\\\\u0001/g, out: '' })\n     replacements.push({ re: /\\\\u001b/g, out: '' })\n     // swap out (, )\n     replacements.push({ re: /\\(/g, out: '\\\\(' })\n     replacements.push({ re: /\\)/g, out: '\\\\)' })\n     // protect *, -, [, ], ?\n     // line = line.replace(/\\\\*/g,'\\*') Not sure how to replace this, gettings lots of errors\n     replacements.push({ re: /\\-/g, out: '\\\\-' })\n     replacements.push({ re: /\\[/g, out: '\\\\[' })\n     replacements.push({ re: /\\]/g, out: '\\\\]' })\n     replacements.push({ re: /\\?/g, out: '\\\\?' })\n     // swap out his, her\n     replacements.push({ re: /\\bhis\\b/g, out: 'h(?:is|er)'   })\n     replacements.push({ re: /\\bher\\b/g, out: 'h(?:is|er)'   })\n     replacements.push({ re: /\\bhim\\b/g, out: 'h(?:im|er)'   })\n     replacements.push({ re: /^He /g,    out: '(?:He|She) ' })\n     replacements.push({ re: /^She /g,   out: '(?:He|She) ' })\n     replacements.push({ re: /^Him /g,   out: '(?:Him|Her) ' })\n     replacements.push({ re: /^Her /g,   out: '(?:Him|Her) ' })\n     replacements.push({ re: /^His /g,   out: '(?:His|Her) ' })\n     // swap out pure numbers\n     replacements.push({ re: / \\d+ /g,   out: ' (\\\\d+) '     })\n     replacements.push({ re: / \\d+\\% /g, out: ' (\\\\d+)\\% '   })\n     replacements.push({ re: / \\d+\\./g,  out: ' (\\\\d+)\\.'    })\n     replacements.push({ re: / \\d+\\$/g,  out: ' (\\\\d+)\\$'    })\n     replacements.push({ re: /\\(\\d+/g,   out: '\\((\\\\d+)'     })\n     replacements.push({ re: /\\d+\\)/g,   out: '(\\\\d+)\\)'     })\n     // swap out numbers not preceeded by letters\n     replacements.push({ re: /\\#\\d+/g,   out: '\\#(\\\\d+)'     })\n     replacements.push({ re: /\\d+\\//g,   out: '(\\\\d+)\\/'     })\n     replacements.push({ re: /\\/\\d+/g,   out: '\\/(\\\\d+)'     })\n     replacements.push({ re: /\\d+\\:/g,   out: '(\\\\d+)\\:'     })\n     replacements.push({ re: /\\:\\d+/g,   out: '\\:(\\\\d+)'     })\n \n // Performance Optimisation\n var ignoreEmpty   = /^$/g\n var ignorePrompt  = /\\<PROMPT\\>/g\n var ignoreChatter = /^\\(.+?\\)\\: .+$/g\n var nameMatcher   = /[A-Z][a-z\\-]+\\b/g\n var fin           = /\\.$/g\n \n var process = function(line) {\n  if (line.length > threshold)   { return { line: line, original: line, excluded: true, } } // don't parse really long lines\n  if (line.match(ignoreEmpty))   { return { line: line, original: line, excluded: true, } } // ignore empty lines\n  if (line.match(ignorePrompt))  { return { line: line, original: line, excluded: true, } } // ignore prompts\n  if (line.match(ignoreChatter)) { return { line: line, original: line, excluded: true, } } // ignore chatter\n     \n  var original = line\n\n  // identify names\n  line = snub(line, nameMatcher, '(\\\\w+)') \n     \n  for (var i=0; i<replacements.length; i++) {\n    var m = replacements[i]\n    line = line.replace(m.re, m.out)\n  }\n\n  line = '^' + line\n  line = line.replace(fin, '\\\\.')\n  line = line + '$'\n\t\n  if (line == '^$') { return {line: line, original: line} }\n  var r = line\n  /*\n  // Performance, removed.\n  var r\n  try { \n    // r = new RegExp(line)\n  } catch(error) { \n    console.log('(tldr) Regex generation failed: ' + line + '.' )\n    console.log('(tldr) : ' + error + '.')\n    return {line: line, original: line}\n  }\n  return {line: line, original: original, regex: r }\n  */\n  return {line: line, original: original }\n }\n \n // Export\n tldr.receive    = receive\n tldr.report     = report\n tldr.activate   = activate\n tldr.deactivate = deactivate\n tldr.ignore     = false\n tldr.parsed     = parsed\n tldr.generated  = generated\n // Options\n tldr.autoGenerate = autoGenerate\n tldr.autoSave     = autoSave\n        \n return tldr\n})( tldr || {} )\n    \n// console.log(tldr)\ntldr.report('Writing tldr.')"},{"type":"function","name":"tldr_generate","enabled":true,"id":13,"code":"tldr = (function(tldr) {\n var folderName      = 'New Triggers'\n var keepOriginal    = true\n \n var generateTrigger = function(data) {\n   var pkg    = client.get_package('.tldr') // !important\n   var id     = false\n   var folder = false\n   // locate the folder to insert\n   for (var i=0; i<pkg.items.length; i++) {\n    var t  = pkg.items[i]\n    if (t.name == folderName) {\n      id = t.id\n      break\n    }\n   }\n   if (!id) { console.log('(tldr): Could not locate folder id.') } else {\n    folder = client.reflex_find_by_id(id, '.tldr') // !important\n   }\n     \n   var trigger = {}\n       trigger.case_sensitive = true\n       trigger.enabled     = true\n       trigger.matching    = 'regexp'\n       trigger.type        = 'trigger'\n       trigger.whole_words = true\n     \n       trigger.text        = ''\n       trigger.actions     = [{action:'script', script:''}] // default script, emptied\n     \n       trigger.p           = false // PARENT\n       trigger.id          = false\n       trigger.name        = false\n     \n   trigger.p = pkg // !important, PARENT\n   trigger.id = client.reflex_find_highest_id('.tldr') + 1\n   if (data.line)     { trigger.text = data.line }\n   if (data.original) { // name generator\n    var vowels     = ['a','e','i','o','u']\n    var consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z','ph','ty','by']\n    var s          = ''\n    var useVowel   = false\n    while (s.length < 7) {\n      if (useVowel) {\n       useVowel = false\n       s += vowels[Math.floor(Math.random() * vowels.length)]\n      } else {\n       useVowel = true\n       s += consonants[Math.floor(Math.random() * consonants.length)]\n      }\n    }\n    trigger.name = s\n   }\n   if (tldr.keepOriginal) {\n    trigger.actions = [{action:'script', script:'//' + data.original + '\\n'}] // keep original line   \n   }\n   // console.log(trigger)\n     \n   // Actual addition\n   folder.items.push(trigger)\n   trigger.p = pkg // as per Nexus\n   client.reflexes_changed()\n\n  // !statistics   \n  tldr.generated += 1\n }\n \n // Empty Trigger Folder\n var clearFolder = function() {\n   var pkg    = client.get_package('.tldr') // !important\n   var id     = false\n   var folder = false\n   // locate the folder to insert\n   for (var i=0; i<pkg.items.length; i++) {\n    var t  = pkg.items[i]\n    if (t.name == folderName) {\n      id = t.id\n      break\n    }\n   }\n   if (!id) { console.log('(tldr): Could not locate folder id.') } else {\n    folder = client.reflex_find_by_id(id, '.tldr') // !important\n   }\n   // console.log(folder)\n   // console.log(folder.items.length)\n   \n   // deleting items in folder, !important, Nexus does not seem to reset IDs, so we won't either\n   \n   /*\n   for (var i=(folder.items.length-1); i>-1; i--) {\n    client.reflex_delete( folder.items[i] )   \n   } */\n   folder.items = []\n   client.reflexes_changed()\n     \n   tldr.report('Clearing New Triggers folder.')\n   tldr.report('Generated ' + tldr.generated + ' triggers from ' + tldr.parsed + ' lines.')\n   tldr.generated = 0\n   tldr.parsed    = 0\n }\n \n var clearBuffer = function() {\n   tldr.buffer = []\n   tldr.report('Buffer cleared.')\n }\n \n var saveSystem = function() {\n   client.gmcp_save_system(true) // !important\n   tldr.report('Saving system.')\n }\n \n // Export\n tldr.generate    = generateTrigger\n tldr.clearFolder = clearFolder\n tldr.clearBuffer = clearBuffer\n tldr.save        = saveSystem\n // Options\n tldr.keepOriginal = keepOriginal\n    \n return tldr\n})( tldr || {} )\n    \n// console.log(tldr)\ntldr.report('Formulating generation methods & clearance methods.')"},{"type":"alias","name":"-tldr","enabled":true,"id":6,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"function","fn":"tldr_ignorables"},{"action":"function","fn":"tldr_initialise"},{"action":"function","fn":"tldr_generate"}],"text":"^\\-tldr$"},{"type":"alias","name":"-t help, syntaxes","enabled":true,"id":100,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var t = [\n 'Do <i>-tldr</i> to rewrite tldr.',\n 'Do <i>-t</i> to toggle tldr.',\n 'Do <i>-t r</i> to delete all new triggers.',\n 'Do <i>-t b</i> to clear the internal buffer.',\n 'Do <i>-t s</i> to save the accumulated triggers by pushing the Nexus system back to server.',\n '',\n 'Do <i>-t help</i> to see this again.',\n '',\n 'Example work flow:',\n ' -tldr',\n ' >> auto collect triggers',\n ' >> move desired triggers to different folder',\n ' -t r (remove all undesired remaining triggers)',\n ' -t s (save system)',\n ' -t   (turn off <i>tldr</i>)',\n]\n\nfor (var i=0; i<t.length; i++) {\n tldr.report(t[i])   \n}"}],"text":"^\\-t[ ]+help$"},{"type":"alias","name":"-t, activate/deactivate","enabled":true,"id":99,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"if (tldr.active) {\n tldr.deactivate()\n} else {\n tldr.activate()   \n}"}],"text":"^\\-t$"},{"type":"alias","name":"-t r, clear folder","enabled":true,"id":24,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"tldr.clearFolder()"}],"text":"^\\-t[ ]+r$"},{"type":"alias","name":"-t b, clear buffer","enabled":true,"id":35,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"tldr.clearBuffer()"}],"text":"^\\-t[ ]+b$"},{"type":"alias","name":"-t s, save system","enabled":true,"id":52,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"tldr.save()"}],"text":"^\\-t[ ]+s$"},{"type":"group","name":"To Be Organised","enabled":true,"id":84,"items":[{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^It bears the distinctive mark of (.*?) \\(a denizen\\)\\.$","actions":[{"action":"script","script":"//It bears the distinctive mark of Rurin, the Crafter (a denizen).\n"}],"id":69,"name":"teweber"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^Plus another (\\d+) whose presence you cannot fully sense \\((\\d+) total\\)\\.$","actions":[{"action":"script","script":"//Plus another 2 whose presence you cannot fully sense (68 total).\n"}],"id":53,"name":"jiwekun"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^\\(SCORE FULL will let you see your full score output.\\)$","actions":[{"action":"script","script":"//(SCORE FULL will let you see your full score output.)\n"}],"id":65,"name":"tinovaph"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^It has (\\d+) months of usefulness left\\.$","actions":[{"action":"script","script":"//It has 108 months of usefulness left.\n"}],"id":67,"name":"gacikoj"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^It weighs about (\\d+) pounds and (\\d+) ounce\\(s\\)\\.$","actions":[{"action":"script","script":"//It weighs about 3 pounds and 0 ounce(s).\n"}],"id":68,"name":"zahupuf"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^(\\d+) gold sovereigns\\.$","actions":[{"action":"script","script":"//80237 gold sovereigns.\n"}],"id":72,"name":"nametof"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^It contains a total of (\\d+) items of a max of (\\d+)\\.$","actions":[{"action":"script","script":"//It contains a total of 2 items of a max of 50.\n"}],"id":73,"name":"cipuzup"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^Deepest Stygian night steals over the land as the symbolic hourglass empties and turns, ready to begin a new day\\.$","actions":[{"action":"script","script":"//Deepest Stygian night steals over the land as the symbolic hourglass empties and turns, ready to begin a new day.\n"}],"id":85,"name":"phacoso"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^It is now the 22nd of (\\w+), (\\d+) years after the fall of the (\\w+) (\\w+)\\.$","actions":[{"action":"script","script":"//It is now the 22nd of Sarapin, 770 years after the fall of the Seleucarian Empire.\n"}],"id":86,"name":"ziphofi"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^You have been afflicted with (.*)\\.$","actions":[{"action":"script","script":"//You have been afflicted with paralysis.\n"}],"id":120,"name":"yezopol"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^You have cured the (.*) affliction\\.$","actions":[{"action":"script","script":"//You have cured the haemophilia affliction.\n"}],"id":132,"name":"hicapoj"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^You remove (\\d+) (.*), bringing the total in the rift to (\\d+)\\.$","actions":[{"action":"script","script":"//You remove 1 goldenseal root, bringing the total in the rift to 1581.\n"}],"id":143,"name":"lemijeph"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^You may eat another plant or mineral\\.$","actions":[{"action":"script","script":"//You may eat another plant or mineral.\n"}],"id":154,"name":"dikifiph"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^bleeding for (\\d+) health\\.$","actions":[{"action":"script","script":"//bleeding for 92 health.\n"}],"id":182,"name":"tyubute"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^Slot (\\d+)\\:[ ]+(\\w+)[ ]+\\(\\*\\* Current \\*\\*\\)$","actions":[{"action":"script","script":"//Slot 4:                  Shaman            (** Current **)\n"}],"id":199,"name":"mivoted"}],"actions":[]},{"type":"group","name":"New Triggers","enabled":true,"id":14,"items":[{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^There is currently a (\\w+) credit sale in progress, but you have already purchased your limit\\.$","actions":[{"action":"script","script":"//There is currently a House credit sale in progress, but you have already purchased your limit.\n"}],"id":200,"name":"pidisat"},{"case_sensitive":true,"enabled":true,"matching":"regexp","type":"trigger","whole_words":true,"text":"^You can purchase (\\d+) available credits in a City credit sale\\.$","actions":[{"action":"script","script":"//You can purchase 5 available credits in a City credit sale.\n"}],"id":201,"name":"gomapac"}],"actions":[]},{"type":"group","name":"Server Reflexive Triggers","enabled":true,"id":10,"items":[{"type":"trigger","name":"Unknown Expression","enabled":true,"id":8,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^I'm sorry, I don't know what \".*\" does\\.$","actions":[{"action":"script","script":""}]},{"type":"trigger","name":"Unknown Expression","enabled":true,"id":9,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^I cannot fathom the meaning of \".*\"\\.$","actions":[{"action":"script","script":""}]},{"type":"trigger","name":"Queue Added","enabled":true,"id":11,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^\\[System\\]\\: (Prepended|Added) .*? to your (balance|equilibrium|eqbal) queue\\.$","actions":[{"action":"script","script":""}]},{"type":"trigger","name":"Queue Run","enabled":true,"id":12,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^\\[System\\]\\: Running queued (balance|equilibrium|eqbal) command\\: .*$","actions":[{"action":"script","script":""}]}],"actions":[]}]}