{"name":"renovate","enabled":true,"description":"Redescribing Nexus","type":"group","id":1,"items":[{"type":"group","name":"Functions","enabled":true,"id":7,"items":[{"type":"function","name":"reno.util","enabled":true,"id":2,"code":"reno = typeof reno != 'undefined' ? reno : {}\n\nreno.classr = 'reno'\nreno.inject = function(rule) { $('body').append('<div class=\"' + reno.classr + '\">&shy;<style>' + rule + '</style></div>') }\n\nreno.clone = function(obj) {\n  var copy;\n  if (null == obj || 'object' != typeof obj) return obj;\n  if (obj instanceof Date) { copy = new Date(); copy.setTime(obj.getTime()); return copy };\n  if (obj instanceof Array) { copy = []; for (var i=0;i<obj.length;i++) { copy[i] = reno.clone(obj[i]) }; return copy };\n  if (obj instanceof Object) { copy = {}; for (var attr in obj) { if (obj.hasOwnProperty(attr)) { copy[attr] = reno.clone(obj[attr]) } }; return copy };\n  throw new Error('Unable to copy obj! Type not supported.'); }\n\nreno.title = function(str) { return str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();}) }"},{"type":"function","name":"reno.styles","enabled":true,"id":11,"code":"reno = typeof reno != 'undefined' ? reno : {}\n\nreno.styles = function() {\n  var rules = ''\n  \n  // Reduce spacing around the containers\n  rules += '.ui-tabs { padding: 0.1em; }\\n'\n  \n  // Restyling of tabs\n  rules += '.ui-tabs .ui-tabs-anchor { position: absolute; height: 14px; width: 25px; left: 5px; top: 0px; }\\n'\n  rules += '.ui-tabs ul.tab_nav > li { height: 11px; }\\n'\n  rules += '.ui-tabs ul.tab_nav > li.ui-tabs-active { border-bottom-color: black; background-color: black; height: 11px; color: #B3B6B7; }\\n'\n  rules += '.ui-tabs div.ui-tabs-panel { padding: 5px 5px 5px 5px; }\\n'\n  rules += '.ui-tabs ul.tab_nav > li { width: 36px; border-radius: 0px; border-top-right-radius: 3px; border-color: rgba(31, 68, 68, 1); }\\n'\n    \n  // Respacing given tab height changes\n  rules += '.ui-tabs > .tab_content { top: -1px; border-radius: 0px; height: calc(100% - 30px); border-color: rgba(31, 68, 68, 1) !important; }\\n'\n    \n  // Reduce opacification of most backgrounds:\n  rules += '.frame_border { background-color: rgba( 1, 1, 1, 0.55) !important; }\\n'\n  rules += '#tab_content_map { background-image: url(\\'https://cdn.pbrd.co/images/HY2x1SI.png\\'); }\\n'\n  rules += '#tab_content_main_output { background-color: rgba( 1, 1, 1, 0.75) !important; }\\n'\n  rules += '#tab_content_all_comm { background-color: rgba( 1, 1, 1, 1) !important; }\\n'\n    \n  reno.inject(rules)\n}\n\n// reno.styles()"},{"type":"function","name":"reno.gmcp","enabled":true,"id":6,"code":"reno = typeof reno != 'undefined' ? reno : {}\nreno.stats    = reno.stats    || {}\nreno.oldstats = reno.oldstats || {}\n\nreno.gmcp = function(r, n) {\n  if (r == 'Char.Vitals') {\n    var t = {}\n        t.class = n.class\n        t.xpn   = parseInt(n.nl)\n        t.xp    = parseInt(n.xp)\n        t.bal   = parseInt(n.bal)\n        t.em    = parseInt(n.em)\n        t.ww    = parseInt(n.ww)\n        t.hp    = parseInt(n.hp)\n        t.maxhp = parseInt(n.maxhp)\n        t.subs  = {\n          internal : parseFloat(n.internal),\n          mind     : parseFloat(n.mind),\n          muscular : parseFloat(n.muscular),\n          sensory  : parseFloat(n.sensory),\n          wetwiring: parseFloat(n.wetwiring),\n        }\n    if (typeof n.nn    != 'undefined') { t.nanites    = parseInt(n.nn)    }\n    if (typeof n.maxnn != 'undefined') { t.maxnanites = parseInt(n.maxnn) }\n    if (typeof n.sa    != 'undefined') { t.sanity     = parseInt(n.sa)    }\n    if (typeof n.maxsa != 'undefined') { t.maxsanity  = parseInt(n.maxsa) }\n    for (var k in t) {\n     reno.oldstats = reno.clone(reno.stats)\n     reno.stats[k] = reno.clone(t[k])\n    }\n    reno.updateChar()\n  }\n  if (r == 'Char.Status') { console.log(n)\n    var t = {}\n    if (typeof n.first_name != 'undefined') {\n        t.name   = n.first_name + ' ' + n.surname\n    }\n        t.race   = n.race\n        t.gender = n.gender\n        t.marks  = parseInt(n.marks)\n    if (typeof n.level != 'undefined') {    \n        t.level  = parseInt(n.level.split(' ')[0])\n    }\n    for (var k in t) {\n     reno.stats[k] = reno.clone(t[k])\n    }\n    reno.updateChar()\n  } \n}"},{"type":"function","name":"reno.chars","enabled":true,"id":4,"code":"reno = typeof reno != 'undefined' ? reno : {}\n\nreno.jq = reno.jq || {}\nreno.profStats = {\n      ['B.E.A.S.T.']:['Strength','Aim'],\n      ['Nanoseer']  :['Psyche','Techcraft'],\n      ['Scoundrel'] :['Aim','Agility'],\n      ['Engineer']  :['Aim','Techcraft'],\n      ['Fury']      :['Strength','Psyche'] }\nreno.profR = {\n      ['B.E.A.S.T.']:['Plasma'],\n      ['Nanoseer']  :['Nanites','Sanity'],\n      ['Scoundrel'] :['Bullets'],\n      ['Engineer']  :[],\n      ['Fury']      :['Rage'] }\n\n// Let us retrieve progressbar.js\n$.ajax({url: 'https://raw.githubusercontent.com/kimmobrunfeldt/progressbar.js/master/dist/progressbar.min.js'}).done(function(data) {\n  try {\n    eval(data)\n    setTimeout(function() { reno.drawBars() }, 1600)\n  } catch(err) { console.log(err) }\n})\n\nreno.buildChar = function() {\n  var subs  = ['muscular','internal','sensory','mind','wetwiring']\n  var stats = ['Lifeforce','Evasion','Regen']\n  var str  = ''\n\n  str += '<div id=\"charsheet\">'\n  str +=  '<div id=\"cs-name-plate\">'\n  str +=    '<div id=\"cs-fullname\">Player</div>'\n  str +=    '<div id=\"cs-title\"></div>'\n  str +=  '</div>'\n  str +=  '<div id=\"cs-info-plate\">'\n  str +=    '<span id=\"cs-race\">human</span> <span id=\"cs-gender\">non-binary</span> '\n  str +=    '<span id=\"cs-prof\">Class</span><sub id=\"cs-level\">1</sub>'\n  str +=  '</div>'\n  str +=  '<div id=\"cs-health-plate\">'\n  str +=    '<div id=\"cs-healthbar\"></div>'\n  str +=    '<div id=\"cs-curhp\" class=\"cs-mono\">1000</div>'\n  str +=    '<div id=\"cs-maxhp\" class=\"cs-mono\">1000</div>'\n  str +=  '</div>'\n  str +=  '<div id=\"cs-subsystems\">'\n  for (var i = 0; i < subs.length; i++) {\n   var name = subs[i]\n   str += '<div id=\"cs-' + name + '-plate\">'\n   str += '<div class=\"cs-prestrips\">'\n   for (var j = 0; j < 4; j++) {\n     str += '<div id=\"cs-' + name + '-dmglevel-' + j + '\" class=\"cs-dmglevel ' + name + '\">&squarf;</div>'\n   }\n   str +=   '<div id=\"cs-' + name + '-dmgticking\" class=\"cs-dmgticking ' + name + '\">~</div>'\n   for (var j = 0; j < 5; j++) {\n     str += '<div id=\"cs-' + name + '-dmgstack-' + j + '\" class=\"cs-dmgstack ' + name + '\">&squarf;</div>'\n   }\n   str += '<div id=\"cs-' + name + '\" class=\"cs-subsystem-title\">  ' + reno.title(name) + '</div>'\n   str += '</div>'\n   str += '<div class=\"cs-strips\">'\n   str +=   '<div id=\"cs-' + name + '-bar\" class=\"cs-sub-bar\"></div>'\n   str +=   '<div id=\"cs-' + name + '-eff\" class=\"cs-sub-bar efficiency\"></div>'\n   str += '</div>'\n      \n   // Appendages\n   if (typeof stats[i] != 'undefined') {\n     str += '<div id=\"cs-stat-' + i + '\" class=\"cs-statpoint\"><div class=\"cs-statname ' + stats[i] + ' cs-mono\">' + stats[i].charAt(0) + ': </div>'\n     str += '<div class=\"cs-statvalue ' + stats[i] + ' cs-mono\">   </div></div>'\n   }\n   str += '</div>'\n  }\n  // Appendage Profession specific, we don't know beforehand what profession, yet we don't want to redraw with each call so...\n  //   we draw all of them, hide them, and display the correct one when GMCP tells us\n  for (var k in reno.profStats) {\n    var z = reno.profStats[k]\n    var p = k\n    if (k == 'B.E.A.S.T.') { p = 'BEAST' }\n    str += '<div id=\"cs-stat-' + p + '\" class=\"cs-stat-profession\" style=\"display: inline-block;\">'\n    for (var i = 0; i < z.length; i++) {\n      str += '<div id=\"cs-stat-' + (stats.length + i) + '\" class=\"cs-statpoint cs-statpoint-profession\"><div class=\"cs-statname ' + z[i] + ' cs-mono\">' + z[i].charAt(0) + ': </div>'\n      str += '<div class=\"cs-statvalue ' + z[i] + ' cs-mono\">   </div></div>'\n    }\n    str += '</div>'\n  }\n    \n  str +=  '</div>'\n  return str\n}\n\nreno.registerTab = function() {\n  var t = {}\n      t.id           = 'reno-charsheet'\n      t.icon_active  = 'who'\n      t.tab_html     = 'Custom Charsheet'\n      t.tab_title    = 'â™¥ Character Sheet!'\n      t.tab_type     = 'content'\n      t.content_html = reno.buildChar()\n  client.register_custom_tab( t, 'container_2' )\n  reno.renewCharsheet() // to register jQuery handles\n}\n\nreno.renewCharsheet = function() {\n  $('#tab_content_reno-charsheet').html(reno.buildChar())\n  reno.jq.name   = $('#cs-fullname')\n  reno.jq.title  = $('#cs-title')\n  reno.jq.age    = $('#cs-age')\n  reno.jq.race   = $('#cs-race')\n  reno.jq.gender = $('#cs-gender')\n  reno.jq.prof   = $('#cs-prof')\n  reno.jq.level  = $('#cs-level')\n  reno.jq.hp     = $('#cs-curhp')\n  reno.jq.mhp    = $('#cs-maxhp')\n  reno.remeasure()\n}\n\nreno.remeasure = function() {\n  var w = $('.cs-prestrips').width()\n      w = w + 7 + 56 // the left-offset & the right-offset\n  $('.cs-strips').css('width', 'calc(100% - ' + w + 'px)')\n}\n\nreno.playerStat = function(stat, total, effect) {\n  if (typeof reno.stats == 'undefined') { return }   \n  reno.stats['playerStats'] = reno.stats['playerStats'] || {}\n  reno.stats.playerStats[stat] = parseInt(total)\n  if ($('.cs-statvalue.' + stat).length) {\n    reno.jq['stat' + stat] = $('.cs-statvalue.' + stat)\n  }\n  reno.updateChar()\n}"},{"type":"function","name":"reno.charstyles","enabled":true,"id":8,"code":"reno = typeof reno != 'undefined' ? reno : {}\n\nvar rules  = ''\n    rules += '@import url(\\'https://fonts.googleapis.com/css?family=Raleway\\');\\n'\n    rules += '@import url(\\'https://fonts.googleapis.com/css?family=Overpass+Mono\\');\\n'\n    \n    // inline-blockify\n    rules += '.cs-dmglevel, .cs-dmgticking, .cs-dmgstack, .cs-subsystem-title {display: inline-block; }\\n'\n    rules += '.cs-prestrips, .cs-strips {display: inline-block; }\\n'\n    rules += '.cs-statpoint, .cs-statname, .cs-statvalue {display: inline-block; }\\n'\n    rules += '.cs-statpoint.cs-statpoint-profession {display: block; }\\n'\n\n    // positioning\n    rules += '#cs-healthbar {position: relative; top: -6px; }\\n'\n    rules += '#cs-curhp {position: absolute; top: 44px; right: 15px; }\\n'\n    rules += '#cs-maxhp {position: absolute; top: 58px; right: 15px; }\\n'\n    rules += '#cs-subsystems {position: relative; top: 7px; }\\n'\n    rules += '.cs-subsystem-title {width: 68px; }\\n'\n    rules += '.cs-strips {position: relative; left: 7px; width: 50%; }\\n'\n    rules += '.cs-sub-bar {height: 4px; }\\n'\n    rules += '.cs-sub-bar.efficiency {height: 2px; }\\n'\n    rules += '#cs-stat-0 {position: absolute; top:  4px; right: 11px; }\\n'\n    rules += '#cs-stat-1 {position: absolute; top: 29px; right: 11px; }\\n'\n    rules += '#cs-stat-2 {position: absolute; top: 54px; right: 11px; }\\n'\n    rules += '.cs-stat-profession {position: absolute; top: calc(25px + 54px); right: 11px; }\\n'\n    rules += '.cs-statpoint.cs-statpoint-profession {line-height: 21px; }\\n'\n\n    // general style\n    rules += '.cs-subsystem-title {white-space: pre-wrap; }\\n'\n    rules += '.cs-statpoint, .cs-statname, .cs-statvalue {white-space: pre-wrap; }\\n'\n\n    // font rules\n    rules += '#charsheet {font-family: \\'Raleway\\', sans serif; font-size: 11pt; }\\n'\n    rules += '#cs-race, #cs-gender, #cs-prof { font-size: 10pt; color: rgba( 78, 78, 78, 1); }\\n'\n    rules += '.cs-mono {font-family: \\'Overpass Mono\\', sans serif; font-size: 8pt; }\\n'\n    rules += '#cs-maxhp {color: rgba( 45, 45, 45, 1 ); }\\n'\n    rules += '.cs-subsystem-title {font-size: 9pt; text-align: right; }\\n'\n\n    // color rules\n    rules += '.cs-dmglevel, .cs-dmgstack {color: rgba( 45, 45, 45, 1 ); }\\n'\n    rules += '.cs-level { }'\n    rules += '.cs-statpoint, .cs-statname, .cs-statvalue {color: rgba( 45, 45, 45, 1 ); }\\n'\n\n    // border\n    rules += '#cs-healthbar > svg {border: 2px outset rgba(48, 83, 113, 1); }\\n'\n\n$('.' + reno.classr).remove()\nreno.inject(rules)"},{"type":"function","name":"reno.bars","enabled":true,"id":9,"code":"reno = typeof reno != 'undefined' ? reno : {}\n\nreno.bench = reno.bench || {}\n\nreno.drawBars = function() {\n  var subs   = ['muscular','internal','sensory','mind','wetwiring']\n  var colors = {\n    ['muscular'] : { color:'rgba(198,   3,  46, 1.00)', from:'', to:'', trailColor:'',\n                    fcolor:'rgba(198,   3,  46, 0.45)', },  \n    ['internal'] : { color:'rgba(213, 226,  27, 1.00)', from:'', to:'', trailColor:'',\n                    fcolor:'rgba(213, 226,  27, 0.45)', },  \n    ['sensory']  : { color:'rgba(121,  14, 178, 1.00)', from:'', to:'', trailColor:'',\n                    fcolor:'rgba(121,  14, 178, 0.45)', },   \n    ['mind']     : { color:'rgba(  8,  85, 178, 1.00)', from:'', to:'', trailColor:'',\n                    fcolor:'rgba(  8,  85, 178, 0.45)', },   \n    ['wetwiring']: { color:'rgba( 69, 188, 147, 1.00)', from:'', to:'', trailColor:'',\n                    fcolor:'rgba( 69, 188, 147, 0.45)', },    \n  }\n  \n  // delete all existing\n  for (var k in reno.bench) {\n    var t = reno.bench[k]\n    if (typeof t.destroy == 'function') { try { t.destroy() } catch(err) { console.log(err) } }\n  }\n    \n  // HP bar first\n  reno.bench['health'] = new ProgressBar.Line('#cs-healthbar', {\n    strokeWidth: 2,\n    color     : '#0de56f',\n    trailColor: '#2b6345', // '#1fa85d',\n    svgStyle  : {width: 'calc(100% - 56px)', height: '100%'},\n    from      : {color: '#0de56f'},\n    to        : {color: '#2b6345'},\n  })\n  \n  for (var i = 0; i < subs.length; i++) {\n    var subsys = subs[i]\n    var v      = colors[subsys] || {}\n    let c      = v['color']     || '#ddd56f'\n    let f      = v['fcolor']    || '#ddd56f'\n    reno.bench[subsys + '-bar'] = new ProgressBar.Line('#cs-' + subsys + '-bar', {\n      strokeWidth : 2,\n      color       : c,\n      trailColor  : 'rgba( 15, 15, 15, 1 )',\n      svgStyle    : {width: '100%', height: '100%' },\n      from        : {color: '#0de56f'},\n      to          : {color: 'rgba( 15, 15, 15, 1 )'},\n    })\n    reno.bench[subsys + '-eff'] = new ProgressBar.Line('#cs-' + subsys + '-eff', {\n      strokeWidth : 1,\n      color       : f,\n      trailColor  : 'rgba( 15, 15, 15, 1 )',\n      svgStyle    : {width: '100%', height: '100%' },\n      from        : {color: '#ddd56f'},\n      to          : {color: 'rgba( 15, 15, 15, 1 )'},\n    })\n  }\n}"},{"type":"function","name":"reno.updates","enabled":true,"id":15,"code":"reno = typeof reno != 'undefined' ? reno : {}\n\nreno.updateChar = function() {\n  var profChange = false\n  var t          = reno.stats\n  \n  if (t.name)   { reno.jq.name.text(t.name)     }\n  if (t.age )   { reno.jq.age.text(t.age)       }\n  if (t.race)   { reno.jq.race.text(t.race)     }\n  if (t.gender) { reno.jq.gender.text(t.gender) }\n  if (t.level)  { reno.jq.level.text(t.level)   }\n  if (t.hp)     { reno.jq.hp.text(t.hp)         }\n  if (t.maxhp)  { reno.jq.mhp.text(t.maxhp)     }\n  \n  if (t.class)  {\n    var oldprof = reno.jq.prof.text()\n    if (oldprof != t.class) { profChange = true }\n    reno.jq.prof.text(t.class)\n  }\n  // update stats\n  reno.updateStats(profChange)\n  // update bars\n  reno.updateBars()\n}\n\nreno.updateStats = function(profChange) {\n  var t = reno.stats\n  // update stats\n  if (typeof t.playerStats == 'undefined') { } else {\n  for (var k in t.playerStats) {\n    if (typeof reno.jq['stat' + k] != 'undefined') {\n      reno.jq['stat' + k].text(t.playerStats[k])   \n    }\n  }}\n  // update profession\n  if (profChange) {\n    // hide all other appendages\n    $('.cs-stat-profession').css('display','none')\n    var prof = reno.stats.class\n    if (prof == 'B.E.A.S.T.') { prof = 'BEAST' }\n    $('#cs-stat-' + prof).css('display','block')\n  }\n}\n\nreno.updateBars = function() {\n  var t = reno.stats\n  // update bars\n  if (typeof reno.bench != 'undefined') {\n    var x = ['muscular','internal','mind','sensory','wetwiring']\n    var m = reno.bench  || {}\n    var u = t.subs      || {}\n    var g = t.effs      || {}\n    if (typeof m.health != 'undefined' && typeof t.hp == 'number' && typeof t.maxhp == 'number') {\n        m.health.set(t.hp / t.maxhp) }\n    for (var i = 0; i < x.length; i++) {\n      var subsys = x[i]\n      if (typeof m[subsys + '-bar'] != 'undefined' && typeof u[subsys] == 'number') { m[subsys + '-bar'].set(u[subsys] / 100) }\n      if (typeof m[subsys + '-eff'] != 'undefined' && typeof g[subsys] == 'number') { m[subsys + '-eff'].set(g[subsys] / 100) }\n    }\n  }\n}"}],"actions":[]},{"type":"group","name":"Triggers","enabled":true,"id":13,"items":[{"type":"trigger","name":"WW Status","enabled":true,"id":12,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(Muscular|Internal|Mind|Sensory|Wetwiring) System[ ]+(.+?)\\% Health[ ]+(.+?)\\% Efficacy","actions":[{"action":"script","script":"var matches    = arguments[0]\nvar subsystem  = matches[1]\nvar efficiency = matches[3]\n\nif (typeof reno != 'undefined') {\n  reno.stats = reno.stats || {}\n  reno.stats.effs = reno.stats.effs || {}\n    \n  reno.stats.effs[subsystem.toLowerCase()] = parseFloat(efficiency)\n}"}]},{"type":"trigger","name":"Stats All","enabled":true,"id":14,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(Strength|Aim|Psyche|Techcraft|Agility|Lifeforce|Evasion|Regen)[ ]+(\\d+)[ ]+(\\d+)[ ]+(\\d+)[ ]+(\\d+)[ ]+(\\d+)","actions":[{"action":"script","script":"var matches = arguments[0]\nvar stat    = matches[1]\nvar base    = matches[2]\nvar assigned= matches[3]\nvar rewards = matches[4]\nvar total   = matches[5]\nvar effect  = matches[6]\n\nif (typeof reno != 'undefined') {\n  reno.playerStat(stat, total, effect)   \n}"}]}],"actions":[]},{"type":"alias","name":"reno","enabled":true,"id":3,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"function","fn":"reno.util"},{"action":"function","fn":"reno.styles"},{"action":"function","fn":"reno.gmcp"},{"action":"function","fn":"reno.chars"},{"action":"function","fn":"reno.charstyles"},{"action":"function","fn":"reno.bars"},{"action":"function","fn":"reno.updates"},{"action":"script","script":"reno.renewCharsheet()\nreno.updateBars()"}],"text":"^reno$"},{"type":"function","name":"onGMCP","enabled":true,"id":5,"code":"var matches = arguments[0]\nvar r       = matches.gmcp_method\nvar n       = matches.gmcp_args\n\nif (typeof reno != 'undefined') {\n  reno.gmcp(r, n)\n}"},{"type":"function","name":"onLoad","enabled":true,"id":10,"code":"reno = typeof reno != 'undefined' ? reno : {}\n\nreno.init = function() {\n  run_function('reno.util',       null, 'ALL')\n  run_function('reno.styles',     null, 'ALL')\n  run_function('reno.gmcp',       null, 'ALL')\n  run_function('reno.chars',      null, 'ALL')\n  run_function('reno.charstyles', null, 'ALL')\n  run_function('reno.bars',       null, 'ALL')\n  run_function('reno.updates',    null, 'ALL')\n  reno.registerTab()\n    \n  setTimeout(function() {\n    reno.renewCharsheet()\n    reno.drawBars()\n  }, 2500)\n}\n\nreno.init()\n"}]}