{"name":"orange juice","enabled":true,"description":"A woke Nexus","type":"group","id":1,"items":[{"type":"alias","name":"oj, Orange Juice","enabled":true,"id":6,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"function","fn":"oj.utilities"},{"action":"function","fn":"oj.express"},{"action":"function","fn":"oj.prompt"},{"action":"function","fn":"oj.gmcp"}],"text":"^oj$"},{"type":"group","name":"Generic Functions","enabled":true,"id":3,"items":[{"type":"function","name":"onLoad","enabled":true,"id":2,"code":"send_command('oj')"}],"actions":[]},{"type":"group","name":"Functions","enabled":true,"id":8,"items":[{"type":"function","name":"oj.utilities","enabled":true,"id":7,"code":"oj = typeof oj != 'undefined' ? oj : {}\n\noj.util = (function() {\n var clean = function(n) {\n   if (typeof n !== 'string') { return n }\n   var x = Number(n.replace(/[^-\\d\\.]/g,''))\n   return x }\n\n var clone = function(obj) {\n   var copy\n   if (null == obj || 'object' != typeof obj) { return obj }\n   if (obj instanceof Date) { \n    copy = new Date()\n    copy.setTime(obj.getTime())\n    return copy }\n   if (obj instanceof Array) {\n    copy = []\n    for (var i=0; i<obj.length; i++) {\n      copy[i] = clone(obj[i]) }\n    return copy }\n   if (obj instanceof Object) {\n    copy = {}\n    for (var attr in obj) {\n      if (obj.hasOwnProperty(attr)) {\n       copy[attr] = clone(obj[attr]) } }\n    return copy }\n   throw new Error('Unable to copy obj! Type not supported.') }\n \n /* https://stackoverflow.com/a/2901298 */\n var comma = function(x) {\n   var parts = x.toString().split('.')\n   parts[0]  = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g,',')\n   return parts.join('.') } \n \n var display = function(a) {\n   var r = function(k,v) {\n    if (typeof v === 'function') {\n      var q = '' + v\n          q = q.substring(0, 79)\n      return 'FUNCTION >>   ' + q }\n    return v }\n   var x = JSON.stringify(a, r, 3)\n   ow_Write('<span class=\"normal\">' + x + '</span><br>') }\n \n var interval = function(a,b) {\n   if (!a) { return 0 }\n   var a = a\n   var b = b || new Date()\n   if (b > a) { b = [a, a = b][0] } // swap variable contents\n   var diff  = a.getTime() - b.getTime()\n   var msecs = diff % 1000\n   var secs  = Math.floor(diff / 1000)\n   var mins  = Math.floor(secs / 60)\n       secs  = secs % 60\n   var hrs   = Math.floor(mins / 60)\n       mins  = mins % 60\n   var days  = Math.floor(hrs  / 24)\n        hrs  =  hrs % 24\n   var s = {}\n       s.msecs = msecs\n       s.secs  = secs\n       s.mins  = mins\n       s.hrs   = hrs\n       s.days  = days\n   return s }\n \n var key = function(arr, v) {\n   for (var prop in arr) {\n    if (arr.hasOwnProperty(prop)) {\n      if (arr[prop] === v) {\n       return prop } } } }\n\n var lpad = function(str, len, ch) {\n   if (typeof str == 'number') { str = str.toString() }\n   if (ch == null) { ch = ' ' }\n   var r = len - str.length\n   if (r < 0) { r = 0 }\n   return ch.repeat(r) + str }\n \n var title = function(str) {\n   return str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();}) }\n \n var round = function(num, dec) {\n   var mult = 10 ^ (dec || 0) \n   return Math.floor(num * mult + 0.5) / mult }\n \n var rpad = function(str, len, ch) {\n   if (typeof str == 'number') { str = str.toString() }\n   if (ch == null) { ch = ' ' }\n   var r = len - str.length\n   if (r < 0) { r = 0 }\n   return str + ch.repeat(r) }\n \n // https://stackoverflow.com/a/1584377\n var uniarray = function(arr) {\n   var a = arr.concat()\n   for (var i=0; i<a.length; ++i) {\n    for (var j=i+1; j<a.length; ++j) {\n      if (a[i] === a[j]) {\n       a.splice(j--, 1) } } }\n   return a }\n \n var uuid = function() {\n   var d = new Date().getTime()\n   if (window.performance && typeof window.performance.now === 'function') {\n    d += performance.now() }\n   var uid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(v) {\n    var r = (d + Math.random() * 16) % 16 | 0\n    d = Math.floor(d / 16)\n    return (v == 'x' ? r : ( r&0x3|0x8)).toString(16) })\n   return uid }\n \n return {\n  clean    :  clean,\n  clone    :  clone,\n  commaThis:  comma,\n  display  :  display,\n  interval :  interval,\n  key      :  key,\n  lpad     :  lpad,\n  round    :  round,\n  rpad     :  rpad,\n  title    :  title,\n  uniarray :  uniarray,\n  uuid     :  uuid,\n }\n})()"},{"type":"function","name":"oj.express","enabled":true,"id":9,"code":"oj = typeof oj != 'undefined' ? oj : {}\n\noj.mparseRE = /(<span|<\\/span>)/g\noj.mparseSP = /\\<\\/span\\>$/\noj.mparseCX = /\\xc-([\\w\\(\\),\\%\\s]+)/\noj.mparsePR = /\\<span.*?\\>/\n\noj.express = function(str, vpos, hpos, overwrite) {\n  var chunks = oj.mparse(str)\n  var vpost  = 0; if (typeof vpos == 'undefined') { vpos = vpost };\n  var hpost  = 1; if (typeof hpos == 'undefined') { hpos = hpost };\n  var ow     = overwrite || false\n  // console.log(chunks)\n /*\n  vpos, use a reference\n  -2 > top of the block\n  -1 > first available previously displayed line\n   0 > current line\n   1 > next available displayed line\n   2 > prompt\n  */\n  var p = []\n  if (vpos == -2) {\n    p = client.current_block[0].parsed_line || client.current_block[0].parsed_prompt\n  } else if (vpos == -1) {\n    var idx = client.current_block.indexOf(client.current_line) - 1\n    if (idx < 0) { idx = 0 }\n    for (var i = idx; i > -1; i--) {\n      if (typeof client.current_block[i] != 'undefined' && client.current_block[i].gag != true) {\n        p = client.current_block[i].parsed_line || client.current_block[i].parsed_prompt\n        break\n      }\n    }\n  } else if (vpos == 0) {\n    if (client.current_line.parsed_line) {\n     p = client.current_line.parsed_line\n    } else if (client.current_line.parsed_prompt) {\n     p = client.current_line.parsed_prompt   \n    }\n  } else if (vpos == 1) {\n    var idx = client.current_block.indexOf(client.current_line) + 1\n    if (idx > (client.current_block.length - 1)) { idx = client.current_block.indexOf(client.current_line) }\n    for (var i = idx; i < client.current_block.length; i++) {\n      if (typeof client.current_block[i] != 'undefined' && client.current_block[i].gag != true) {\n        p = client.current_block[i].parsed_line || client.current_block[i].parsed_prompt\n        break\n      }\n    }\n  } else if (vpos == 2) {\n    // usually the last line of the block\n    p = client.current_block[(client.current_block.length - 1)].parsed_prompt || []\n  }\n /*\n  hpos \n  -2 > prefix & newline\n  -1 > prefix\n   0 > newline\n   1 > suffix\n   2 > suffix & newline\n  */\n  \n  if (hpos == -2) {\n    chunks.push( client.linechunk_text('\\n') )\n    p.chunks = chunks.concat(p.chunks)\n  } else if (hpos == -1) {\n    p.chunks = chunks.concat(p.chunks)\n  } else if (hpos == 0) {\n    chunks = [client.linechunk_text('\\n')].concat(chunks)\n      console.log(chunks)\n    p.chunks = p.chunks.concat(chunks)  \n  } else if (hpos == 1) {\n    p.chunks = p.chunks.concat(chunks)\n  } else if (hpos == 2) {\n    chunks.unshift( client.linechunk_text('\\r\\n') )\n    p.chunks = p.chunks.concat(chunks)\n  }\n}\n\noj.mparse = function(str) {\n var out = []\n var str = str || ''\n var RE  = oj.mparseRE\n var SP  = oj.mparseSP\n var CX  = oj.mparseCX\n var PR  = oj.mparsePR\n var matches; \n while (matches = RE.exec(str)) { out.push(matches.index) }\n var cap = str.length\n var g = []\n \n for (var i = out.length - 1; i > -1; i--) { \n  var n = out[i]\n  g.unshift(str.substring(n, cap))\n  cap = n\n  if (i == 0 && out[i] != 0) { g.unshift(str.substring(0, out[i])) } // rescue the front of the line\n }\n // console.log(str); console.log(g)\n\n var cm     = []\n var chunks = []\n for (var i = 0; i < g.length; i++) {\n  var el = g[i]\n  if (el.match(SP)) {\n    cm.pop()\n    var c = cm[cm.length - 1] || 'reset'\n    chunks.push( client.linechunk_color(c) )\n  } else if (el.match('</span>')) {\n    cm.pop()\n    var c = cm[cm.length - 1] || 'reset'\n    chunks.push( client.linechunk_color(c) )\n    var e = el.replace('</span>','')\n    chunks.push( client.linechunk_text(e) )\n  } else if (el.match('<span ')) {\n    var c = el.match(CX)\n    if (c) {\n      cm.push(c[1])\n      chunks.push( client.linechunk_color(c[1]) ) }\n    var e = el.replace(PR,'')\n    chunks.push( client.linechunk_text(e) )\n  } else {\n    chunks.push( client.linechunk_text(el) )\n  }\n }\n // console.log(chunks)\n return chunks\n}"}],"actions":[]},{"type":"group","name":"Triggers","enabled":true,"id":11,"items":[{"type":"trigger","name":"Score, hacking","enabled":true,"id":12,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^ Hacking Level\\:[ ]+(\\d+\\.\\d+)[ ]+Rank\\:[ ]+(\\w+)","actions":[{"action":"script","script":"var matches = arguments[0]\nvar hack    = matches[2]\n\nvar str = ''\n\nstr += '<span class=\"huh xc-rgba(244,1,1,1)\">Representing <span class=\"xc-green\">blood</span>:</span> '\nstr += hack + '<span class=\"xc-rgba(144, 233, 212, 1)\">!</span>'\n\n// oj.express(str, 0, -2)"}]}],"actions":[]}]}