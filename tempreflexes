var reflexes;
var reflex_highest_id;
var reflex_package_highest_ids;

/// +++ Individual reflex management +++

// each reflex is an object, containing at least 'id', 'type', and 'name'
// ids are auto-assigned, and currently serve no purpose, planned for scripting usage
var reflex_create_group = function(p, name, pkg)
{
    return client.reflex_create(p, name, "group", pkg);
}

var reflex_master_group = function()
{
    if (client.reflexes.type == "group") return client.reflexes;
    client.reflex_highest_id = 0;   // to prevent an endless loop
    var group = reflex_create_group(null, "MASTER");
    group.id = 1;
    client.reflex_highest_id = 1;
    client.reflexes = group;
    return client.reflexes;
}

var reflex_create = function(p, name, type, pkg)
{
    var r = {};
    r.type = type;
    r.name = name;
    r.enabled = true;
    r.id = client.reflex_find_highest_id(pkg) + 1;

    if (p != null) {
        p.items.push(r);
        r.p = p;
    }

    if (type == "group")
        r.items = [];

    if (type == "alias") setup_alias(r);
    if (type == "trigger") setup_trigger(r);
    if (type == "event") setup_event(r);
    if (type == "keybind") setup_keybind(r);
    // nothing for functions

    client.reflexes_changed();

    return r;
}

var reflex_delete = function(r)
{
    var p = r.p;
    if (p == null) return;
    var idx = p.items.indexOf(r);
    if (idx >= 0) p.items.splice(idx, 1);
    client.reflexes_changed();
}

var reflex_duplicate = function(r, group, pkg)
{
    var newr = client.reflex_create(group, r.name, r.type, pkg);
    for (var key in r) {
        if ((newr[key] === undefined) || (key == 'actions'))
            newr[key] = r[key];
    }
    client.reflexes_changed();
    return newr;
}

// src: reflex that is being moved, hitMode: over = child of dest, before/after = before/after dest, same parent
var move_reflex = function(src, dest, hitMode)
{
    if ((src == null) || (dest == null)) return;
    var p = src.p;
    if (p) {
        var idx = p.items.indexOf(src);
        if (idx >= 0) p.items.splice(idx, 1);
    }
    if ((hitMode == 'over') && (dest.type != 'group')) hitMode = 'after';  // just in case

    if (hitMode == 'over') {
        dest.items.push(src);
        src.p = dest;
        return;
    }

    var p = dest.p;
    src.p = p;
    var idx = p.items.indexOf(dest);
    if (hitMode == 'before')
        p.items.splice(idx, 0, src);
    else
        p.items.splice(idx + 1, 0, src);
}

// traverse the reflexes in order, calling fn on each
var reflex_traverse = function(fn, group, include_groups, include_packages)
{
    client.reflex_master_group();

    if (group == null) group = client.reflexes;

    if (group.type !== "group") {
        fn(group);
        return;
    } else if (include_groups) {
        var res = fn(group);
        if (res && (res === 'skip')) return;   // used to disable entire groups
    }

    for (var i = 0; i < group.items.length; ++i) {
        if (group.items[i].type === "group")
            reflex_traverse(fn, group.items[i], include_groups, false);
        else
            fn(group.items[i]);
    }

    // add packages too if requested; recursive calls never have this set
    if (include_packages) traverse_packages(fn, include_groups);
}

var reflex_find_highest_id = function(pkg)
{
    var group = null;
    if ((pkg !== undefined) && package_exists(pkg)) group = get_package(pkg);
    if ((pkg === undefined) && (!client.reflexes.type)) return 0;

    var res = 0;
    reflex_traverse(function(r) { if (r.id > res) res = r.id; }, group, true);
    return res;
}

var reflex_find_by_id = function(id, pkg)
{
    var group = null;
    if ((pkg !== undefined) && package_exists(pkg)) group = get_package(pkg);
    var res = null;
    reflex_traverse(function(r) { if ((res == null) && (r.id == id)) res = r; }, group, true);
    return res;
}

var reflex_find_by_name = function(type, name, case_sensitive, enabled_only, pkg) {
    if (!name) return undefined;

    var group = null;
    if ((pkg !== undefined) && package_exists(pkg)) group = get_package(pkg);
    var list = [];
    reflex_traverse(function(r) { var allow = (r.enabled || (!enabled_only)); if (allow && (r.type == type)) list.push(r); if ((r.type == 'group') && (!allow)) return 'skip'; }, group, true, false);
    if (!case_sensitive) name = name.toLowerCase();
    for (var i = 0; i < list.length; ++i) {
        if (case_sensitive) {
            if (list[i].name == name) return list[i];
        } else {
            if (list[i].name.toLowerCase() == name) return list[i];
        }
    }
    return undefined;
}

var reflex_enable = function(el) {
    if (!el) return;
    el.enabled = true;
    client.reflexes_changed();
}

var reflex_disable = function(el) {
    if (!el) return;
    el.enabled = false;
    client.reflexes_changed();
}

var reflexes_changed = function()
{
    if (client.settings_window && client.settings_window.update_reflexes_display)
        client.settings_window.update_reflexes_display();
}

// Returns a flattened and ordered list of active reflexes. Used by processing functions
var reflex_get_active_list = function(type)
{
    return reflex_get_flat_list(type, true);
}

var reflex_get_flat_list = function(type, active)
{
    var res = [];
    reflex_traverse(function(r) { var allow = (r.enabled || (!active)); if (allow && (r.type === type)) res.push(r); if ((r.type == 'group') && (!allow)) return 'skip'; }, null, true, true);
    return res;
}

// used for filtering reflexes
var match_reflex = function(r, txt) {
    if ((!txt) || (txt.length == 0)) return true;

    txt = txt.toLowerCase();
    if (r.type == txt) return true;   // type must match exactly to qualify
    // name
    if (r.name && r.name.toLowerCase().indexOf(txt) >= 0) return true;
    // the rest goes by types
    if ((r.type == 'alias') || (r.type == 'trigger')) {
        if (r.text && r.text.toLowerCase().indexOf(txt) >= 0) return true;
    }
    if (r.type == 'function') {
        if (r.code && r.code.toLowerCase().indexOf(txt) >= 0) return true;
    }
    if (r.type == 'event') {
        if (r.evtype && r.evtype.toLowerCase().indexOf(txt) >= 0) return true;
        if (r.evsubtype && r.evsubtype.toLowerCase().indexOf(txt) >= 0) return true;
    }

    if (r.actions) {
        for (var idx = 0; idx < r.actions.length; ++idx) {
            var a = r.actions[idx];
            if ((a.action == 'command') && a.command && a.command.toLowerCase().indexOf(txt) >= 0) return true;
            if ((a.action == 'notify') && a.notice && a.notice.toLowerCase().indexOf(txt) >= 0) return true;
            if ((a.action == 'highlight') && a.highlight && a.highlight.toLowerCase().indexOf(txt) >= 0) return true;
            if ((a.action == 'rewrite') && a.rewrite_text && a.rewrite_text.toLowerCase().indexOf(txt) >= 0) return true;
            if ((a.action == 'function') && a.fn && a.fn.toLowerCase().indexOf(txt) >= 0) return true;
            if ((a.action == 'script') && a.script && a.script.toLowerCase().indexOf(txt) >= 0) return true;
        }
    }
}


var is_alphanumeric = function(ch) {
    if ((!ch) | (ch.length == 0)) return false;
    if ((ch >= 'a') && (ch <= 'z')) return true;
    if ((ch >= 'A') && (ch <= 'Z')) return true;
    if ((ch >= '0') && (ch <= '9')) return true;
    if (ch == '_') return true;
    return false;
}

var regexp_cache = new Object();
// This returns a cached regexp object, or creates a new one. The goal is to cache the regex parsing.
var get_regexp = function(re, case_sensitive) {
    var idx = 'RE' + re + (case_sensitive ? 'S' : 'I');
    if (client.regexp_cache[idx]) return client.regexp_cache[idx];

    var exp = null;
    var opts = '';
    if (!case_sensitive) opts = 'i';
    try {
        exp = new RegExp(re, opts);
    } catch (msg) {
        print("<b style='color: red;'>RegEx Error in Pattern [" + re + "]:</b><br/>" + msg);
        return null;
    }
    if (exp)
        client.regexp_cache[idx] = exp;
    return exp;
}


// exact, begins, substring, regexp
// used by aliases and triggers
var do_matching = function(text, pattern, type, whole_words, case_sensitive) {
    if ((pattern == null) || (pattern.length == 0)) return null;
    var txt = text;
    var res = {};
    res.text = txt;
    res.type = type;
    var regex;
    if (type == 'regexp')
        regex = true;
    else if ((type == 'exact') || (type == 'begins') || (type == 'substring') || (type == 'ends'))
        regex = false;
    else return;

    // Are we using simplified patterns?
    var simplified_vars = undefined;

    if (!regex) {
        // check if they are using a simplified pattern
        // simplified patterns contain the string <varname>, which stores a matching subtext (single word only) into a variable of the given name. E.g. 'You take <gold> gold sovereigns. will match on "You take 45 gold sovereigns.", setting @gold to 45.
        var simplified = true;
        if (pattern.indexOf('<') < 0) simplified = false;
        if (pattern.indexOf('>') < 0) simplified = false;
        if (simplified && (!pattern.match(/<\w+>/))) simplified = false;
        if (simplified) {
            // turn the text into a regular expression
            regex = true;
            simplified_vars = Array();
            var pp = pattern;
            pattern = '';
            var invar = false;
            var varname = '';
            // a simple parser that produces a regexp and remembers the desired variable names
            for (var i = 0; i < pp.length; ++i) {
                var letter = pp[i];
                if (invar) {
                    if (is_alphanumeric(letter))
                        varname += letter;
                    else if (letter == '>') {
                        invar = false;
                        pattern += '(\\S+)';
                        simplified_vars.push(varname);
                        varname = '';
                    } else {
                        invar = false;
                        pattern += '<' + varname + letter;
                        varname = '';
                    }
                } else {
                    if (letter == '<') {
                        invar = true;
                        varname = '';
                    }
                    else
                    {
                        if ((letter == '\\') || (letter == '*') || (letter == '+') || (letter == '.') || (letter == '(') || (letter == ')') || (letter == '[') || (letter == ']') || (letter == '{') || (letter == '}') || (letter == '|') || (letter == '^') || (letter == '$'))
                            pattern += '\\';
                        pattern += letter;
                    }
                }
            }
            if ((type == 'exact') || (type == 'begins')) pattern = '^' + pattern;
            if ((type == 'exact') || (type == 'ends')) pattern = pattern + '$';
        }
    }

    if (!regex) {
        if (!case_sensitive) {
            pattern = pattern.toLowerCase();
            txt = txt.toLowerCase();
        }
        var pos = txt.indexOf(pattern);
        if (pos == -1) return null;
        var posend = pos + pattern.length;
        if (((type == 'begins') || (type == 'exact')) && (pos > 0)) return null;
        if (((type == 'ends') || (type == 'exact')) && (posend != txt.length)) return null;
        // whole words?
        if (whole_words) {
            var pre = ' ', post = ' ';
            if (pos > 0) pre = txt.substr(pos - 1, 1);
            if (posend < txt.length) post = txt.substr(posend, 1);
            // doing whole-words using spaces only, otherwise we get weird things like 't.something' triggering targeting
            if ((pre != ' ') || (post != ' ')) return null;
            // if (is_alphanumeric(pre) || is_alphanumeric(post)) return null;
        }
        res.index = pos;
        res.match = text.substr(pos, pattern.length);
        res.prefix = text.substr(0, pos);
        res.suffix = text.substr(posend);
        // variables
        return res;
    }
    else {
        var re = pattern;
        // triggers ending in | match everything, and for some weird reason didn't in 2.1, adding a workaround
        while ((re.length >= 2) && (re.substr(re.length-1) == '|') && (re.substr(re.length-2,1) != '\\'))
            re = re.substr(0, re.length - 1);

        // fetch a RegExp object, caching the compiled expression
        var exp = client.get_regexp(re, case_sensitive);
        // if exp is null, the regexp had an error, and it was already reported, so just bail out
        if (!exp) return null;

        var result = exp.exec(text);
        if (result == null) return null;
        var pos = result.index;
        var posend = pos + result[0].length;
        if (whole_words) {
            var pre = ' ', post = ' ';
            if (pos > 0) pre = txt.substr(pos - 1, 1);
            if (posend < txt.length) post = txt.substr(posend, 1);
            // doing whole-words using spaces only, otherwise we get weird things like 't.something' triggering targeting
            if ((pre != ' ') || (post != ' ')) return null;
            // if (is_alphanumeric(pre) || is_alphanumeric(post)) return null;
        }
        res.index = pos;
        res.match = result[0];
        res.prefix = text.substr(0, pos);
        res.suffix = text.substr(posend);
        res.backrefs = result;
        if (simplified_vars !== undefined) {
            // need to convert the backrefs into variables for the simplified matching
            res.variables = {};
            for (var i = 0; i < simplified_vars.length; ++i)
                res.variables[simplified_vars[i]] = result[i + 1];
        }

        return res;
    }
    return null;
}

var match_position = function(match, type, backref)
{
    if (!match.text) return null;

    var res = {};
    if (type == 'line') {
        res.start = 0;
        res.len = match.text.length;
        return res;
    }
    if (type == 'match') {
        res.start = match.index;
        res.length = match.match.length;
        return res;
    }
    if (type == 'prefix') {
        res.start = 0;
        res.length = match.prefix.length;
        return res;
    }
    if (type == 'suffix') {
        res.start = match.index + match.match.length;
        res.length = match.suffix.length;
        return res;
    }
    // regular expressions
    if (type == 'backref') {  // these are capture groups, not backrefs, but whatever
        // capture groups; [0] is the matching text, 1+ are captured groups
        if (typeof backref == 'string') backref = parseInt(backref);
        if (match.backrefs == undefined) return null;
        if (backref == NaN) backref = 0;
        if (match.backrefs[backref].length <= backref) return null;   // yes, '<=' is correct; need length 4 for 3 backrefs
        // find the matched text in the regexp ... this sucks big-time and will often be wrong, but javascript
        // doesn't support backref indexes
        res.start = match.index + match.match.indexOf(match.backrefs[backref]);
        if (res.start < match.index) return null;
        res.length = match.backrefs[backref].length;
        return res;
    }
    return null;
}

var do_replacements = function(replacement, match, prefix_suffix)
{
    if (!match.text) return replacement;

    var res = replacement;
    var replace = {};
    replace['match'] = match.match;
    replace['line'] = match.text;
    replace['prefix'] = match.prefix;
    replace['suffix'] = match.suffix;
    if (match.backrefs) {
        var ref = 1;
        while (match.backrefs[ref] != null) {
           replace[ref] = match.backrefs[ref];
            ref++;
        }
    }
    res = client.handle_variables(res, replace);

    if (match.variables)
        res = client.handle_variables(res, match.variables);

    if (prefix_suffix) {
        if (match.prefix) res = match.prefix + res;
        if (match.suffix) res = res + match.suffix;
    }
    return res;
}

// for save/load
var reflexes_fix_parents = function() {
    var traverse = function(node) {
        if (!node.items) return;
        for (var idx = 0; idx < node.items.length; ++idx) { node.items[idx].p = node; traverse(node.items[idx]); }
    }
    traverse(client.reflexes);
    for (var i = 0; i < client.packages.length; ++i)
        traverse(client.packages[i]);
}

// for save/load - needed to serialise the object
var reflexes_wipe_parents = function() {
    var traverse = function(node) {
        delete node.p;
        if (!node.items) return;
        for (var idx = 0; idx < node.items.length; ++idx) traverse(node.items[idx]);
    }
    traverse(client.reflexes);
    for (var i = 0; i < client.packages.length; ++i)
        traverse(client.packages[i]);
}


// exports reflexes, starting with the provided parent, as a JSON string
var reflexes_export = function(node) {
    client.reflexes_wipe_parents();
    var res = JSON.stringify(node);
    client.reflexes_fix_parents();
    return res;
}


// convert old reflexes to the new system
var reflexes_convert = function() {
    p = client.reflex_master_group();
    // aliases
    if (client.aliases != null) {
        client.reflexes = {};
        p = client.reflex_master_group();
        for (var idx = 0; idx < client.aliases.length; ++idx) {
            var txt = client.aliases[idx].alias;
            var rep = client.aliases[idx].replace_with;
            var a = client.reflex_create(p, txt, 'alias');
            a.text = txt;
            a.actions = [];
            var act = { command: rep, prefix_suffix: true };
            a.actions.push(act);
        }
        delete client.aliases;
    }
    // bindings
    if (client.bindings != null) {
        for (var idx = 0; idx < client.bindings.length; ++idx) {
            var key = client.bindings[idx].alias;
            var rep = client.bindings[idx].replace_with;
            var a = client.reflex_create(p, null, 'keybind');
            a.key = client.bindings[idx].key;
            a.key_alt = client.bindings[idx].key_alt;
            a.key_ctrl = client.bindings[idx].key_ctrl;
            a.key_shift = client.bindings[idx].key_shift;
            a.actions = [ { command: client.bindings[idx].command } ];
        }
        delete client.bindings;
    }
    if (client.triggers != null) {
        for (var idx = 0; idx < client.triggers.length; ++idx) {
            var txt = client.triggers[idx].criteria;
            var rep = client.triggers[idx].send;
            var notify = client.triggers[idx].print;
            var cis = client.triggers[idx].case_insensitive;
            var gag = client.triggers[idx].gag;
            var fn = client.triggers[idx].function_name;
            var code = client.triggers[idx].code;
            var hilight = client.triggers[idx].hilight;
            var hilight_bg = client.triggers[idx].hilight_bg;
            var hilight_fg = client.triggers[idx].hilight_fg;
            var t = client.reflex_create(p, null, 'trigger');
            t.text = txt;
            t.case_sensitive = (cis !== true);
            t.matching = 'regexp';
            t.actions = [];
            var act = { action: 'command', command: rep };
            t.actions.push(act);
            if (gag) {
                t.actions.push({ action: 'gag' });
            }
            if (notify && notify.length) {
                t.actions.push({ action: 'notify', 'notice': notify, 'notice_fg': 'red' });
            }
            if (hilight) {
                t.actions.push({ action: 'highlight', 'highlight': 'match', 'highlight_fg': hilight_fg, 'highlight_bg': hilight_bg });
            }
            if (fn && fn.length) {
                t.actions.push({ action: 'function', 'fn': fn });
            }
            if (code && code.length && ((code.length != 593) || (code.substr(440, 15) != 'an array as fol'))) {
                t.actions.push({ action: 'script', 'script': code });
            }
        }

        delete client.triggers;
        delete client.trigger_groups;
    }
    if (client.functions != null) {
        for (var idx = 0; idx < client.functions.length; ++idx) {
            var name = client.functions[idx].name;
            var code = client.functions[idx].code;
            var f = client.reflex_create(p, name, 'function');
            f.code = code;
        }
        delete client.functions;
    }

    if (client.variables != null)
        client.convert_variables();

}


